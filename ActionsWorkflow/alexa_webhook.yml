# This is a basic workflow to help you get started with Actions

name: AlexaIssueDemo

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  repository_dispatch:
    types: [publish_alexa]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      issues: write    

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get today's date
        id: date
        run: |
          echo "::set-output name=today::$(date "+%Y/%m/%d")"

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - run: 'echo "field: ${{ github.event.client_payload.name }}"'
      - run: 'echo "payload: ${{ toJson(github.event.client_payload) }}"'

      

      - name: OpenAI - Ask for a Job Title
        uses: onmax/oai-createcompletion-githubaction@v1.0
        id: openai
        with:
          model: gpt-3.5-turbo-instruct
          prompt: "Ich bin Chuck Norris und arbeite in der Agentur für Arbeit und ist der beste Jobberater der Welt. Welchen Job würdest du ${{ github.event.client_payload.name }} empfehlen. Er macht etwas mit IT und Cloud. Der Jobtitel soll im Chuck Norris Stil sein.Bitte gebe nur den Jobtitel aus."
          max_tokens: 2000
          temperature: 1 # the temperature for the model. Optional
          openai_api_key: ${{ secrets.OPENAI_API_KEY }} # your openai api key

    # Examples on how to use the output
      - name: Show response from OpenAI - Job Title
        id: jobtitle
        run: |
          # echo '${{ steps.openai.outputs.response }}'
          variable=$(echo '${{ steps.openai.outputs.response }}' | jq -r '.texts[] | sub("\\n"; "") | sub("\""; "")| sub("\""; "")')
          echo $variable
          variable=$(echo $variable | tr '\n' ' ')
          echo "JobTitle=$variable" >> "$GITHUB_OUTPUT"

      - name: OpenAI - Ask for a Job Description
        uses: onmax/oai-createcompletion-githubaction@v1.0
        id: openai2
        with:
          model: gpt-3.5-turbo-instruct
          prompt: "Ich brauche eine epische Aufgabenbeschreibung für ${{ github.event.client_payload.name }} mit dem Jobtitel ${{ steps.jobtitle.outputs.JobTitle }}. Sie soll ein wenig sarkastisch sein."
          max_tokens: 2000
          temperature: 1 # the temperature for the model. Optional
          openai_api_key: ${{ secrets.OPENAI_API_KEY }} # your openai api key
          # Examples on how to use the output

      - name: Show response from OpenAI - Job Description
        id: jobdescription
        run: |
          variable=$(echo '${{ steps.openai2.outputs.response }}' | jq -r '.texts[] | sub("\\n"; "") | sub("\""; "")| sub("\""; "")')
          echo $variable
          variable=$(echo $variable | tr '\n' ' ')
          echo "JobDescription=$variable" >> "$GITHUB_OUTPUT"

      - name: Create an issue
        uses: actions-ecosystem/action-create-issue@v1
        with:
          github_token: ${{ secrets.github_token }}
          title: ${{ steps.date.outputs.today }} - ${{ github.event.client_payload.name }}
          body: |
            ##  We have a good job for you. You are a/an ${{ steps.jobtitle.outputs.JobTitle }} 
            Your job description:
            ${{ steps.jobdescription.outputs.JobDescription }} 
          
          
            ## ${{ github.event.client_payload.name }} TODO list:

            - [ ] Have a meeting with dev team
            - [ ] Check the dashboard

          labels: |
            meeting
            important
